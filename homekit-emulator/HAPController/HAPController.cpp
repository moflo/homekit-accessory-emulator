//
//  HAPController.cpp
//  homekit-wolfssl
//
//  Created by d. nye on 6/30/17.
//  Copyright Â© 2017 Mobile Flow LLC. All rights reserved.
//

#include "HAPController.h"

HAPControllerClass::HAPControllerClass()
{
//    this->_buffer = NULL;
}

HAPControllerClass::~HAPControllerClass()
{
}

int
HAPControllerClass::SRPClientInit(Srp *cli)
{
    int r = 0;
    byte username[] = "alice";
    word32 usernameSz = 5;
    
    byte password[] = "password123";
    word32 passwordSz = 11;
    
    if (!r) r = wc_SrpInit(cli, SRP_TYPE_SHA512, SRP_CLIENT_SIDE);
    if (!r) r = wc_SrpSetUsername(cli, username, usernameSz);

    /* loading N, g and salt in advance to generate the verifier. */
    byte salt_3072[] = {
        0xBE, 0xB2, 0x53, 0x79, 0xD1, 0xA8, 0x58, 0x1E, 0xB5, 0xA7, 0x27, 0x67, 0x3A, 0x24,
        0x41, 0xEE
    };
    
    byte N[] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F,
        0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34, 0xC4, 0xC6, 0x62, 0x8B,
        0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67,
        0xCC, 0x74, 0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22,
        0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD, 0xEF, 0x95,
        0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D,
        0xF2, 0x5F, 0x14, 0x37, 0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51,
        0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
        0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF,
        0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED, 0xEE, 0x38, 0x6B, 0xFB,
        0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B,
        0x1F, 0xE6, 0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D,
        0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05, 0x98, 0xDA,
        0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8,
        0xFD, 0x24, 0xCF, 0x5F, 0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3,
        0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB,
        0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C,
        0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04, 0xF1, 0x74, 0x6C, 0x08,
        0xCA, 0x18, 0x21, 0x7C, 0x32, 0x90, 0x5E, 0x46, 0x2E, 0x36,
        0xCE, 0x3B, 0xE3, 0x9E, 0x77, 0x2C, 0x18, 0x0E, 0x86, 0x03,
        0x9B, 0x27, 0x83, 0xA2, 0xEC, 0x07, 0xA2, 0x8F, 0xB5, 0xC5,
        0x5D, 0xF0, 0x6F, 0x4C, 0x52, 0xC9, 0xDE, 0x2B, 0xCB, 0xF6,
        0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7C, 0xEA, 0x95,
        0x6A, 0xE5, 0x15, 0xD2, 0x26, 0x18, 0x98, 0xFA, 0x05, 0x10,
        0x15, 0x72, 0x8E, 0x5A, 0x8A, 0xAA, 0xC4, 0x2D, 0xAD, 0x33,
        0x17, 0x0D, 0x04, 0x50, 0x7A, 0x33, 0xA8, 0x55, 0x21, 0xAB,
        0xDF, 0x1C, 0xBA, 0x64, 0xEC, 0xFB, 0x85, 0x04, 0x58, 0xDB,
        0xEF, 0x0A, 0x8A, 0xEA, 0x71, 0x57, 0x5D, 0x06, 0x0C, 0x7D,
        0xB3, 0x97, 0x0F, 0x85, 0xA6, 0xE1, 0xE4, 0xC7, 0xAB, 0xF5,
        0xAE, 0x8C, 0xDB, 0x09, 0x33, 0xD7, 0x1E, 0x8C, 0x94, 0xE0,
        0x4A, 0x25, 0x61, 0x9D, 0xCE, 0xE3, 0xD2, 0x26, 0x1A, 0xD2,
        0xEE, 0x6B, 0xF1, 0x2F, 0xFA, 0x06, 0xD9, 0x8A, 0x08, 0x64,
        0xD8, 0x76, 0x02, 0x73, 0x3E, 0xC8, 0x6A, 0x64, 0x52, 0x1F,
        0x2B, 0x18, 0x17, 0x7B, 0x20, 0x0C, 0xBB, 0xE1, 0x17, 0x57,
        0x7A, 0x61, 0x5D, 0x6C, 0x77, 0x09, 0x88, 0xC0, 0xBA, 0xD9,
        0x46, 0xE2, 0x08, 0xE2, 0x4F, 0xA0, 0x74, 0xE5, 0xAB, 0x31,
        0x43, 0xDB, 0x5B, 0xFC, 0xE0, 0xFD, 0x10, 0x8E, 0x4B, 0x82,
        0xD1, 0x20, 0xA9, 0x3A, 0xD2, 0xCA, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF
    };
    
    byte g[] = {
        0x05
    };
    
    if (!r) r = wc_SrpSetParams(cli, N,    sizeof(N),
                                g,    sizeof(g),
                                salt_3072, sizeof(salt_3072));
    if (!r) r = wc_SrpSetPassword(cli, password, passwordSz);

    return r;
}

int
HAPControllerClass::getChallenge(uint8_t **salt,uint32_t *salt_len, uint8_t **key, uint32_t *key_len)
{
    Srp cli;

    int r = SRPClientInit(&cli);

    byte verifier[384];
    word32 v_size = sizeof(verifier);

    
    if (!r) r = wc_SrpGetVerifier(&cli, verifier, &v_size);
    
    *key = (uint8_t *)verifier;
    uint32_t v_len = (uint32_t)v_size;
    *key_len = v_len;
    
    *salt = cli.salt;
    *salt_len = cli.saltSz;
    
    
    return r;
    
}

int
HAPControllerClass::getChallengeTest(uint8_t **salt,uint32_t *salt_len, uint8_t **key, uint32_t *key_len)
{

    uint8_t test_salt[] = {
        0x59, 0x6f, 0x29, 0x06, 0x1b, 0xf3, 0xc6, 0x59, 0x92, 0x3d, 0x91, 0x12, 0x27, 0x54,
        0x09, 0xdd
    };
    
    uint32_t test_salt_len = sizeof(test_salt);

    uint8_t test_key[] = {
        0xa2, 0x22, 0x63, 0xf0, 0xd9, 0x67, 0xd2, 0xc7, 0x7c, 0xe6, 0xdb, 0x25, 0xbb, 0x79,
        0x12, 0xcd, 0x4e, 0xa7, 0xb1, 0xed, 0xb0, 0x76, 0x91, 0xff, 0x3f, 0x65, 0x9b, 0x89,
        0x25, 0x2d, 0x84, 0x12, 0xc7, 0xd2, 0x55, 0x4d, 0xd5, 0x80, 0xfe, 0x50, 0xc0, 0x0f,
        0xb4, 0x6e, 0x7f, 0x91, 0x75, 0x56, 0x8a, 0x75, 0xf0, 0xa4, 0xe1, 0x90, 0x54, 0xa7,
        0x8f, 0xe1, 0xd5, 0xf5, 0xa7, 0x3c, 0x93, 0x1c, 0xbd, 0x1e, 0x80, 0x7d, 0x5c, 0x42,
        0x23, 0x1a, 0xbc, 0xdd, 0x1a, 0xd6, 0xf6, 0x9b, 0xdc, 0x0c, 0xa3, 0x06, 0x0d, 0xfb,
        0x21, 0xa2, 0xac, 0x9f, 0xca, 0xdc, 0x91, 0x2d, 0x1f, 0xb4, 0x13, 0xd7, 0x95, 0xec,
        0x5b, 0x60, 0x5e, 0x38, 0x6f, 0x6c, 0xf2, 0x65, 0x60, 0x4f, 0xcc, 0xd4, 0xb6, 0x99,
        0xd1, 0xa8, 0x9b, 0x70, 0x6a, 0x78, 0x55, 0x2f, 0x2e, 0x6f, 0x08, 0x59, 0xbb, 0xae,
        0x8b, 0x19, 0xe2, 0xae, 0xd5, 0x08, 0x8c, 0x2d, 0x89, 0x6a, 0xe9, 0x75, 0x4b, 0xd8,
        0xbb, 0x38, 0x2b, 0xd7, 0xb6, 0x0e, 0xc8, 0xd0, 0xf0, 0xdd, 0xdb, 0x68, 0xf7, 0xd2,
        0x1e, 0x8b, 0xf0, 0x3d, 0x8a, 0x0d, 0x56, 0x43, 0x68, 0x33, 0x80, 0x5e, 0xa3, 0x67,
        0xf6, 0xbe, 0x86, 0xf2, 0xaa, 0x4b, 0xd3, 0x0f, 0x92, 0x48, 0x5a, 0x80, 0x82, 0xd6,
        0x76, 0x59, 0xef, 0x4d, 0xde, 0xd1, 0x65, 0x05, 0xfa, 0x3d, 0xa1, 0xb9, 0x08, 0x94,
        0xfe, 0xd8, 0x55, 0x73, 0x87, 0x80, 0xd4, 0x32, 0x1a, 0x85, 0x19, 0x53, 0x68, 0xa7,
        0x83, 0xa9, 0x09, 0xc9, 0xde, 0x8c, 0xb7, 0x90, 0x1a, 0xdd, 0xbf, 0x21, 0x40, 0x3a,
        0x49, 0xe3, 0xd6, 0x46, 0xf3, 0x62, 0x95, 0x5d, 0x78, 0x9c, 0xb3, 0x0b, 0x8d, 0xcf,
        0xc7, 0xd9, 0x67, 0xbd, 0x9e, 0xfa, 0xf4, 0x5b, 0x40, 0x8f, 0x23, 0x30, 0x18, 0x33,
        0xbc, 0xb0, 0x9c, 0x86, 0x1c, 0x06, 0xdc, 0xc0, 0x58, 0x35, 0x69, 0x9e, 0x92, 0x5c,
        0x9c, 0xfa, 0xb6, 0x52, 0x2a, 0xad, 0xb4, 0xb7, 0x19, 0x32, 0x19, 0x77, 0xcd, 0x4a,
        0x49, 0x29, 0xe1, 0xfe, 0xf2, 0x89, 0x95, 0xb3, 0x7c, 0xf3, 0x5e, 0xf9, 0xeb, 0xfe,
        0x44, 0x21, 0x98, 0x85, 0x3c, 0x9e, 0xa7, 0x8a, 0x39, 0xe9, 0xa5, 0x69, 0xce, 0x26,
        0x34, 0xe8, 0x07, 0x2d, 0x6d, 0x71, 0x9a, 0x9b, 0x29, 0x53, 0x9e, 0xcd, 0x68, 0xb2,
        0x1d, 0x3c, 0x86, 0xcb, 0xcf, 0xa1, 0x9a, 0x24, 0x99, 0xb4, 0x03, 0x8e, 0xb9, 0x68,
        0xc6, 0xa9, 0xc1, 0x0e, 0x42, 0xd6, 0x46, 0x41, 0xa2, 0x44, 0xd6, 0xf6, 0xe0, 0xe3,
        0xd9, 0xa8, 0x8b, 0x79, 0xae, 0x32, 0xf8, 0x99, 0x2b, 0xa2, 0x3b, 0x38, 0xc0, 0x29,
        0x49, 0x5f, 0x6d, 0xb8, 0x67, 0x1b, 0xfc, 0x4b, 0x90, 0x7d, 0x6e, 0x52, 0x20, 0xe7, 
        0x2f, 0xe8, 0xe1, 0x81, 0xcc, 0xf8
    };
    
    uint32_t test_key_len = sizeof(test_key);

    
    /*
    uint8_t test_salt[] = {
        0xBE, 0xB2, 0x53, 0x79, 0xD1, 0xA8, 0x58, 0x1E, 0xB5, 0xA7, 0x27, 0x67, 0x3A, 0x24,
        0x41, 0xEE
    };
    
    uint32_t test_salt_len = sizeof(test_salt);
    
    
    uint8_t test_key[] = {
        0x40, 0xF5, 0x70, 0x88, 0xA4, 0x82, 0xD4, 0xC7, 0x73, 0x33, 0x84, 0xFE, 0x0D, 0x30,
        0x1F, 0xDD, 0xCA, 0x90, 0x80, 0xAD, 0x7D, 0x4F, 0x6F, 0xDF, 0x09, 0xA0, 0x10, 0x06,
        0xC3, 0xCB, 0x6D, 0x56, 0x2E, 0x41, 0x63, 0x9A, 0xE8, 0xFA, 0x21, 0xDE, 0x3B, 0x5D,
        0xBA, 0x75, 0x85, 0xB2, 0x75, 0x58, 0x9B, 0xDB, 0x27, 0x98, 0x63, 0xC5, 0x62, 0x80,
        0x7B, 0x2B, 0x99, 0x08, 0x3C, 0xD1, 0x42, 0x9C, 0xDB, 0xE8, 0x9E, 0x25, 0xBF, 0xBD,
        0x7E, 0x3C, 0xAD, 0x31, 0x73, 0xB2, 0xE3, 0xC5, 0xA0, 0xB1, 0x74, 0xDA, 0x6D, 0x53,
        0x91, 0xE6, 0xA0, 0x6E, 0x46, 0x5F, 0x03, 0x7A, 0x40, 0x06, 0x25, 0x48, 0x39, 0xA5,
        0x6B, 0xF7, 0x6D, 0xA8, 0x4B, 0x1C, 0x94, 0xE0, 0xAE, 0x20, 0x85, 0x76, 0x15, 0x6F,
        0xE5, 0xC1, 0x40, 0xA4, 0xBA, 0x4F, 0xFC, 0x9E, 0x38, 0xC3, 0xB0, 0x7B, 0x88, 0x84,
        0x5F, 0xC6, 0xF7, 0xDD, 0xDA, 0x93, 0x38, 0x1F, 0xE0, 0xCA, 0x60, 0x84, 0xC4, 0xCD,
        0x2D, 0x33, 0x6E, 0x54, 0x51, 0xC4, 0x64, 0xCC, 0xB6, 0xEC, 0x65, 0xE7, 0xD1, 0x6E,
        0x54, 0x8A, 0x27, 0x3E, 0x82, 0x62, 0x84, 0xAF, 0x25, 0x59, 0xB6, 0x26, 0x42, 0x74,
        0x21, 0x59, 0x60, 0xFF, 0xF4, 0x7B, 0xDD, 0x63, 0xD3, 0xAF, 0xF0, 0x64, 0xD6, 0x13,
        0x7A, 0xF7, 0x69, 0x66, 0x1C, 0x9D, 0x4F, 0xEE, 0x47, 0x38, 0x26, 0x03, 0xC8, 0x8E,
        0xAA, 0x09, 0x80, 0x58, 0x1D, 0x07, 0x75, 0x84, 0x61, 0xB7, 0x77, 0xE4, 0x35, 0x6D,
        0xDA, 0x58, 0x35, 0x19, 0x8B, 0x51, 0xFE, 0xEA, 0x30, 0x8D, 0x70, 0xF7, 0x54, 0x50,
        0xB7, 0x16, 0x75, 0xC0, 0x8C, 0x7D, 0x83, 0x02, 0xFD, 0x75, 0x39, 0xDD, 0x1F, 0xF2,
        0xA1, 0x1C, 0xB4, 0x25, 0x8A, 0xA7, 0x0D, 0x23, 0x44, 0x36, 0xAA, 0x42, 0xB6, 0xA0,
        0x61, 0x5F, 0x3F, 0x91, 0x5D, 0x55, 0xCC, 0x3B, 0x96, 0x6B, 0x27, 0x16, 0xB3, 0x6E,
        0x4D, 0x1A, 0x06, 0xCE, 0x5E, 0x5D, 0x2E, 0xA3, 0xBE, 0xE5, 0xA1, 0x27, 0x0E, 0x87,
        0x51, 0xDA, 0x45, 0xB6, 0x0B, 0x99, 0x7B, 0x0F, 0xFD, 0xB0, 0xF9, 0x96, 0x2F, 0xEE,
        0x4F, 0x03, 0xBE, 0xE7, 0x80, 0xBA, 0x0A, 0x84, 0x5B, 0x1D, 0x92, 0x71, 0x42, 0x17,
        0x83, 0xAE, 0x66, 0x01, 0xA6, 0x1E, 0xA2, 0xE3, 0x42, 0xE4, 0xF2, 0xE8, 0xBC, 0x93,
        0x5A, 0x40, 0x9E, 0xAD, 0x19, 0xF2, 0x21, 0xBD, 0x1B, 0x74, 0xE2, 0x96, 0x4D, 0xD1,
        0x9F, 0xC8, 0x45, 0xF6, 0x0E, 0xFC, 0x09, 0x33, 0x8B, 0x60, 0xB6, 0xB2, 0x56, 0xD8,
        0xCA, 0xC8, 0x89, 0xCC, 0xA3, 0x06, 0xCC, 0x37, 0x0A, 0x0B, 0x18, 0xC8, 0xB8, 0x86,
        0xE9, 0x5D, 0xA0, 0xAF, 0x52, 0x35, 0xFE, 0xF4, 0x39, 0x30, 0x20, 0xD2, 0xB7, 0xF3,
        0x05, 0x69, 0x04, 0x75, 0x90, 0x42
    };
    
    uint32_t test_key_len = sizeof(test_key);
    */
    
     
    // Copy byte arrays
    *key = (uint8_t *)malloc(test_key_len);
    memcpy(*key, test_key, test_key_len);
    *key_len = test_key_len;

    *salt = (uint8_t *)malloc(test_salt_len);
    memcpy(*salt, test_salt, test_salt_len);
    *salt_len = test_salt_len;

    return 1;

}
